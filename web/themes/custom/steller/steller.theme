<?php
use Drupal\Core\Menu\MenuTreeParameters;

use Drupal\Core\Menu\MenuLinkTreeInterface;
use Drupal\Core\Url;
use Drupal\file\FileInterface;
use Drupal\Core\DrupalKernel;
use Drupal\node\Entity\Node;


use Drupal\Core\Menu\MenuTreeInterface;
/**
 * Implements hook_page_attachments_alter().
 */
function steller_page_attachments_alter(array &$attachments) {
  // Define the updated viewport meta tag.
  $updated_viewport_meta = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1, shrink-to-fit=no',
    ],
  ];

  // Search for and replace the existing viewport meta tag.
  if (!empty($attachments['#attached']['html_head'])) {
    foreach ($attachments['#attached']['html_head'] as $key => &$element) {
      if (is_array($element) && isset($element[0]['#tag']) && $element[0]['#tag'] === 'meta' && $element[0]['#attributes']['name'] === 'viewport') {
        // Replace the existing viewport meta tag.
        $attachments['#attached']['html_head'][$key][0] = $updated_viewport_meta;
        return;
      }
    }
  }

  // If no viewport meta tag exists, add it.
  $attachments['#attached']['html_head'][] = [$updated_viewport_meta, 'viewport_meta'];
}
/**
 * ImplÃ©mentation de hook_theme_suggestions_HOOK().
 */
function steller_preprocess_html(array &$variables) {
  // data-spy="scroll" data-target=".navbar" data-offset="40" id="home"
  $variables['attributes']['data-spy'] = 'scroll';
  $variables['attributes']['data-target'] = '.navbar';
  $variables['attributes']['data-offset'] = '40';
  $variables['attributes']['id'] = 'home';
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function steller_preprocess_page(array &$variables) {
  // Access the settings from the configuration.
  $config = \Drupal::config('steller.settings');

  // Get the active theme's path.
  $theme_path = \Drupal::theme()->getActiveTheme()->getPath();

  // Define the default logo path.
  $default_logo = $theme_path . '/logo.svg'; // Adjust the filename if needed.

  // Check for a custom logo defined in theme settings.
  $logo_path = theme_get_setting('logo.url') ?: $default_logo;

  // Use the file_url_generator service to generate the logo URL.
  $file_url_generator = \Drupal::service('file_url_generator');
  $logo_url = $file_url_generator->generateAbsoluteString($logo_path);

  // Add the logo URL to the template variables.
  $variables['logo'] = $logo_url;






  // Load the main menu tree.
  $menu_name = 'main';
  $menu_tree = \Drupal::menuTree();

  // Build the parameters to load the menu tree.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);

  // Load the tree based on the parameters.
  $tree = $menu_tree->load($menu_name, $parameters);

  // Transform the tree using the menu link manager.
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  $tree = $menu_tree->transform($tree, $manipulators);

  // Build the render array.
  $menu = $menu_tree->build($tree);

  // Pass the menu items to the Twig template.
  $variables['main_menu_items'] = $menu['#items'];





  // Pass the settings to the template.
  $variables['full_name'] = $config->get('full_name');
  $variables['what_you_do'] = $config->get('what_you_do');

  // Get the file URI from the theme settings.
  $file_uri = $config->get('cv_pdf');
  // Get the URL using the stream wrapper manager.
  $file_url = \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal\file\Entity\File::load($file_uri[0])->getFileUri());
  $variables['cv_url'] = $file_url;



    // Get the file URI from the theme settings.
    $header_img_uri = $config->get('header_img');
    // Get the URL using the stream wrapper manager.
    $header_img_url = \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal\file\Entity\File::load($header_img_uri[0])->getFileUri());
    $variables['header_img'] = $header_img_url;

    // Get the file URI from the theme settings.
    $cv_img_uri = $config->get('cv_img');
    // Get the URL using the stream wrapper manager.
    $cv_img_url = \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal\file\Entity\File::load($cv_img_uri[0])->getFileUri());
    $variables['cv_img'] = $cv_img_url;

    // Pass the settings to the template.
    $variables['happy_clients']      = $config->get('happy_clients');
    $variables['projects_completed'] = $config->get('projects_completed');
    $variables['awards_won']         = $config->get('awards_won');
    $variables['resume']             = $config->get('resume');

    $variables['facebook']             = $config->get('facebook');
    $variables['google']               = $config->get('google');
    $variables['linkedin']             = $config->get('linkedin');
    $variables['twitter']               = $config->get('twitter');





  // Fetch the last 3 article nodes
  $nodes = \Drupal::entityTypeManager()->getStorage('node')
    ->loadByProperties(['type' => 'article', 'status' => 1]);

  // Load nodes using loadMultiple() method after sorting them by creation date
  $node_ids = array_keys($nodes);
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($node_ids);

  // Sort nodes by creation date (descending order)
  usort($nodes, function ($a, $b) {
    return strtotime($b->getCreatedTime()) - strtotime($a->getCreatedTime());
  });

  // Limit to the last 3 articles
  $last_three_articles = array_slice($nodes, 0, 3);

  // Extract the title and body for each article
  $articles_data = [];
  foreach ($last_three_articles as $node) {
    $author = $node->getOwner();
    $author_name = $author->getDisplayName();

    $url = $node->toUrl()->toString();


    $articles_data[] = [
      'title'       => $node->getTitle(),
      'body'        => $node->get('body')->value,
      'author_name' => $author_name,
      'url'         => $url,
    ];
  }

  // Pass the article data to the page template
  $variables['last_three_articles'] = $articles_data;


}


